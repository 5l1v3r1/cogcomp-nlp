Illinois Quantifier
    Copyright (C) 2012
    Subhro Roy and Dan Roth
    Cognitive Computation Group
    Department of Computer Science, University of Illinois at Urbana-Champaign
    http://cogcomp.cs.illinois.edu/page/software_view/Chunker

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.


This is a README for Illinois Quantifier (Version 2.0.1)
=================================

This tool takes plain, unannotated text as input and detects mentions
of quantities in the text, as well as normalizes it to a standard
form. The program has two compenents connected in a pipeline:

  1. An LBJava classifier which detects spans of text containing quantities.
  2. A rule based normalizer which coverts quantities to a standard form.

This distribution contains the LBJava and Java source code for the
quantifier and also allows for training the model using your own
training data.

1. Requirements
===============
Running the Illinois Quantifier *requires* Java 1.6 or higher.

2. Installation
===============

==Downloads==

Illinois Quantifier can be downloaded from http://cogcomp.cs.illinois.edu/page/software_view/Quantifier.


3. Running the Illinois Quantifier
====================================

3.1 Generating Quantities for plain text file
--------------------------------------------------

The Illinois Quantifier comes bundled with a program that takes a
plain, unannotated text file as input and produces that same text with
standardized quantity annotations as output. To invoke this program,
type:

java -cp target/classes/:target/dependency/*
edu.illinois.cs.cogcomp.quant.driver.Quantifier <plainTextFile>
<doesNormalize(Y/N)>

When doesNormalize is set to N, no normalization is done, only spans
of text with quantities is detected. When set to Y, complete
normalization is done.


3.2 PROGRAMMATIC USE
-------------------------------------------

To include in a Maven project, use the following dependency and repository
declarations in your project's pom.xml file:

    <dependencies>
        ...
        <dependency>
            <groupId>edu.illinois.cs.cogcomp</groupId>
            <artifactId>illinois-quantifier</artifactId>
            <version>2.0.6</version>
        </dependency>
        ...
    </dependencies>
    <repositories>
        <repository>
            <id>CogcompSoftware</id>
            <name>CogcompSoftware</name>
            <url>http://cogcomp.cs.illinois.edu/m2repo/</url>
        </repository>
    </repositories>

If you do not have Maven, you can add the jar file
illinois-quantifier-2.0.1.jar in target/ folder to your classpath.


3.2.1 Using Locally
--------------------------------------------
    
    Quantifier quantifier = new Quantifier();
    List<QuantSpan> quantSpans = quantifier.getSpans(<text>, true);
    for(QuantSpan qs : quantSpans) {
        System.out.println("Quantity : "+qs.toString());		  
    }
   


3.3 Compiling the Code and Retraining
--------------------------------------------

Note: To compile the code and lbjava files you need to have Maven
installed on your system. To download Maven, visit
http://maven.apache.org/download.cgi

From the main directory, run : 

  sh scripts/train.sh

This downloads all dependencies, trains the model, and compiles all
the source files. The training data is provided in data/trainData.txt


3.3.1 Training Details
--------------------------------------------

The provided model is trained on annotated data, which is provided
with this distribution. The data is in data/train.txt, and follows the
CoNLL 2000 format. The annotations required are BIO tags for each token
of sentences, indicating the span of text. The valid tags are as follows :

  Tag       Explanation: "The chunker predicts the word ..."
  B-DATE      begins a date mention or daterange mention.
  I-DATE      is inside a date mention or daterange mention.
  B-RATIO     begins a ratio mention.
  I-RATIO     is inside a ratio mention.
  B-RANGE     begins a range mention (representing a range of (non-date)values).
  I-RANGE     is inside a range mention (representing a range of (non-date)values).
  B-NUM       begins a quantity mention, not falling in the above categories.
  I-NUM       is inside a quantity mention, not falling in the above categories.
  O           is outside of any quantity mention.


3.3.2 Training on new data
-----------------------------------------------

You will need to generate the data in CoNLL format (same as
data/train.txt). Add the location in
src/main/java/edu/illinois/cs/cogcomp/quant/lbj/Constants.java, and
recompile.


4. Citation
==================
If this software is used, please cite the following paper:

1. Reasoning about Quantities in Natural Language
   Subhro Roy, Tim Vieira and Dan Roth
   TACL 2015

5. Troubleshooting and Reporting Problems
==========

You can report problems to the CCG mailing list, and look for
solutions in the list archives:

http://lists.cs.uiuc.edu/mailman/listinfo/illinois-ml-nlp-users

