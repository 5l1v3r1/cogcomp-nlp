package edu.illinois.cs.cogcomp.comma.lbj;
import edu.illinois.cs.cogcomp.comma.Comma;
import edu.illinois.cs.cogcomp.comma.Sentence;
import edu.illinois.cs.cogcomp.comma.CommaReader;
import edu.illinois.cs.cogcomp.comma.bayraktar.BayraktarPatternLabeler;
import edu.illinois.cs.cogcomp.edison.sentences.Constituent;
import edu.illinois.cs.cogcomp.edison.sentences.ViewNames;
import edu.illinois.cs.cogcomp.edison.sentences.Relation;
import edu.illinois.cs.cogcomp.edison.sentences.PredicateArgumentView;
import java.util.List;
import java.util.ArrayList;

discrete UnigramLeftFeature(Comma c) <- {
    return c.getWordToLeft(1);
}

discrete UnigramSecondLeftFeature(Comma c) <- {
	return c.getWordToLeft(2);
}

discrete UnigramRightFeature(Comma c) <- {
    return c.getWordToRight(1);
}

discrete UnigramSecondRightFeature(Comma c) <- {
	return c.getWordToRight(2);
}



discrete UnigramLeftPOSFeature(Comma c) <- {
    return c.getPOSToLeft(1);
}

discrete UnigramSecondLeftPOSFeature(Comma c) <- {
    return c.getPOSToLeft(2);
}

discrete UnigramLexicalizedLeftPOSFeature(Comma c) <- {
    String label =  c.getPOSToLeft(1);
    if(label.equals("CC"))
    	label += ":" + c.getWordToLeft(1);
    return label;
}

discrete UnigramRightPOSFeature(Comma c) <- {
    return c.getPOSToRight(1);
}

discrete UnigramSecondRightPOSFeature(Comma c) <- {
    return c.getPOSToRight(2);
}

discrete UnigramLexicalizedRightPOSFeature(Comma c) <- {
    String label =  c.getPOSToRight(1);
    if(label.equals("CC"))
    	label += ":" + c.getWordToRight(1);
    return label;
}

 

discrete UnigramLeftChunkFeature(Comma c) <- {
    return c.getStrippedNotation(c.getChunkToLeftOfComma(1));
}

discrete UnigramSecondLeftChunkFeature(Comma c) <- {
  return c.getStrippedNotation(c.getChunkToLeftOfComma(2));
}

discrete UnigramRightChunkFeature(Comma c) <- {
    return c.getStrippedNotation(c.getChunkToRightOfComma(1));
}

discrete UnigramSecondRightChunkFeature(Comma c) <- {
  return c.getStrippedNotation(c.getChunkToRightOfComma(2));
}



discrete UnigramLeftPhraseFeature(Comma c) <- {
    return c.getNotation(c.getPhraseToLeftOfComma(1));
}

discrete UnigramSecondLeftPhraseFeature(Comma c) <- {
  return c.getNotation(c.getPhraseToLeftOfComma(2));
}

discrete UnigramRightPhraseFeature(Comma c) <- {
    return c.getNotation(c.getPhraseToRightOfComma(1));
}

discrete UnigramSecondRightPhraseFeature(Comma c) <- {
  return c.getNotation(c.getPhraseToRightOfComma(2));
}

discrete CommaParentPhraseFeature(Comma c) <- {
    return c.getNotation(c.getPhraseToLeftOfParent(0));
}

discrete UnigramParentLeftPhraseFeature(Comma c) <- {
    return c.getNotation(c.getPhraseToLeftOfParent(1));
}

discrete UnigramParentSecondLeftPhraseFeature(Comma c) <- {
  return c.getNotation(c.getPhraseToLeftOfParent(2));
}

discrete UnigramParentRightPhraseFeature(Comma c) <- {
    return c.getNotation(c.getPhraseToRightOfParent(1));
}

discrete UnigramParentSecondRightPhraseFeature(Comma c) <- {
  return c.getNotation(c.getPhraseToRightOfParent(2));
}




discrete UnigramLeftStrippedPhraseFeature(Comma c) <- {
    return c.getStrippedNotation(c.getPhraseToLeftOfComma(1));
}

discrete UnigramSecondLeftStrippedPhraseFeature(Comma c) <- {
  return c.getStrippedNotation(c.getPhraseToLeftOfComma(2));
}

discrete UnigramRightStrippedPhraseFeature(Comma c) <- {
    return c.getStrippedNotation(c.getPhraseToRightOfComma(1));
}

discrete UnigramSecondRightStrippedPhraseFeature(Comma c) <- {
  return c.getStrippedNotation(c.getPhraseToRightOfComma(2));
}

discrete CommaParentStrippedPhraseFeature(Comma c) <- {
    return c.getStrippedNotation(c.getPhraseToLeftOfParent(0));
}

discrete UnigramParentLeftStrippedPhraseFeature(Comma c) <- {
    return c.getStrippedNotation(c.getPhraseToLeftOfParent(1));
}

discrete UnigramParentSecondLeftStrippedPhraseFeature(Comma c) <- {
  return c.getStrippedNotation(c.getPhraseToLeftOfParent(2));
}

discrete UnigramParentRightStrippedPhraseFeature(Comma c) <- {
    return c.getStrippedNotation(c.getPhraseToRightOfParent(1));
}

discrete UnigramParentSecondRightStrippedPhraseFeature(Comma c) <- {
  return c.getStrippedNotation(c.getPhraseToRightOfParent(2));
}



discrete% LeftToRightDependencies(Comma c) <- {
	String[] ltor = c.getLeftToRightDependencies();
	for(int i=0; i<ltor.length; i++)
		sense ltor[i];
}
discrete% RightToLeftDependencies(Comma c) <- {
	String[] rtol = c.getLeftToRightDependencies();
  	for(int i=0; i<rtol.length; i++)
		sense rtol[i];
}




discrete% SRLFeature(Comma c) <- {
    List SRLs = c.getContainingSRLs();
    for (int i = 0; i < SRLs.size(); i++) {
        String s = (String) SRLs.get(i);
        sense s;
    }
}


discrete ParseTreeFeature(Comma c) <- {
    String tree = "";
    int distance = 0;
    String phrase;
    do{
      phrase = c.getNotation(c.getPhraseToLeftOfParent(distance));
      tree = phrase + tree;
      distance++;
    }while(!phrase.equals("NULL"));

    String commaLevelPhrases = "";
    distance = 0;
	do{
      phrase = c.getNotation(c.getPhraseToLeftOfComma(distance));
      commaLevelPhrases =  phrase + commaLevelPhrases;
      distance++;
    }while(!phrase.equals("NULL"));
    
	distance = 1;
    do{
      phrase = c.getNotation(c.getPhraseToRightOfComma(distance));
      commaLevelPhrases = commaLevelPhrases + phrase;
      distance++;
    }while(!phrase.equals("NULL"));
	tree += "(" + commaLevelPhrases + ")";

    distance = 1;
    do{
      phrase = c.getNotation(c.getPhraseToRightOfParent(distance));
      tree = tree + phrase;
      distance++;
    }while(!phrase.equals("NULL"));
    
    return tree;
    //return commaLevelPhrases;
}

discrete StrippedParseTreeFeature(Comma c) <- {
    String tree = "";
    int distance = 0;
    String phrase;
    do{
      phrase = c.getStrippedNotation(c.getPhraseToLeftOfParent(distance));
      tree = phrase + tree;
      distance++;
    }while(!phrase.equals("NULL"));

    String commaLevelPhrases = "";
    distance = 0;
	do{
      phrase = c.getStrippedNotation(c.getPhraseToLeftOfComma(distance));
      commaLevelPhrases =  phrase + commaLevelPhrases;
      distance++;
    }while(!phrase.equals("NULL"));
    
	distance = 1;
    do{
      phrase = c.getStrippedNotation(c.getPhraseToRightOfComma(distance));
      commaLevelPhrases = commaLevelPhrases + phrase;
      distance++;
    }while(!phrase.equals("NULL"));
	tree += "(" + commaLevelPhrases + ")";

    distance = 1;
    do{
      phrase = c.getStrippedNotation(c.getPhraseToRightOfParent(distance));
      tree = tree + phrase;
      distance++;
    }while(!phrase.equals("NULL"));
    
    return tree;
    //return commaLevelPhrases;
}

discrete CommaSiblingsFeature(Comma c) <- {
    String commaLevelPhrases = "";
    String phrase;
    int distance = 0;
	do{
      phrase = c.getNotation(c.getPhraseToLeftOfComma(distance));
      commaLevelPhrases =  phrase + commaLevelPhrases;
      distance++;
    }while(!phrase.equals("NULL"));
    
	distance = 1;
    do{
      phrase = c.getNotation(c.getPhraseToRightOfComma(distance));
      commaLevelPhrases = commaLevelPhrases + phrase;
      distance++;
    }while(!phrase.equals("NULL"));

    return commaLevelPhrases;
}

discrete BayraktarPatternFeature(Comma c) <- {
	return c.getBayraktarPattern();
}

discrete BayraktarLabelFeature(Comma c) <- {
	return c.getBayraktarLabel();
}


discrete BigramLeftPhraseFeature(Comma c) <- UnigramSecondLeftPhraseFeature && UnigramLeftPhraseFeature
discrete BigramRightPhraseFeature(Comma c) <- UnigramSecondRightPhraseFeature && UnigramRightPhraseFeature
discrete BigramLeftRightPhraseFeature(Comma c) <- UnigramLeftPhraseFeature && UnigramRightPhraseFeature
discrete BigramParentLeftPhraseFeature(Comma c) <- UnigramParentSecondLeftPhraseFeature && UnigramParentLeftPhraseFeature
discrete BigramParentRightPhraseFeature(Comma c) <- UnigramParentSecondRightPhraseFeature && UnigramParentRightPhraseFeature

discrete BigramLeftStrippedPhraseFeature(Comma c) <- UnigramSecondLeftStrippedPhraseFeature && UnigramLeftStrippedPhraseFeature
discrete BigramRightStrippedPhraseFeature(Comma c) <- UnigramSecondRightStrippedPhraseFeature && UnigramRightStrippedPhraseFeature
discrete BigramLeftRightStrippedPhraseFeature(Comma c) <- UnigramLeftStrippedPhraseFeature && UnigramRightStrippedPhraseFeature
discrete BigramParentLeftStrippedPhraseFeature(Comma c) <- UnigramParentSecondLeftStrippedPhraseFeature && UnigramParentLeftStrippedPhraseFeature
discrete BigramParentRightStrippedPhraseFeature(Comma c) <- UnigramParentSecondRightStrippedPhraseFeature && UnigramParentRightStrippedPhraseFeature



discrete% StrippedParentParseFeatures(Comma c) <- CommaParentStrippedPhraseFeature, UnigramParentLeftStrippedPhraseFeature, UnigramParentSecondLeftStrippedPhraseFeature, UnigramParentRightStrippedPhraseFeature, UnigramParentSecondRightStrippedPhraseFeature
discrete% StrippedSiblingParseFeatures(Comma c) <- UnigramSecondLeftStrippedPhraseFeature, UnigramSecondRightStrippedPhraseFeature, UnigramLeftStrippedPhraseFeature, UnigramRightStrippedPhraseFeature
discrete% StrippedBigramParseFeatures(Comma c) <- BigramLeftStrippedPhraseFeature, BigramRightStrippedPhraseFeature, BigramLeftRightStrippedPhraseFeature

discrete% ParentParseFeatures(Comma c) <- CommaParentPhraseFeature, UnigramParentLeftPhraseFeature, UnigramParentSecondLeftPhraseFeature, UnigramParentRightPhraseFeature, UnigramParentSecondRightPhraseFeature, BigramParentLeftPhraseFeature, BigramParentRightPhraseFeature 
discrete% SiblingParseFeatures(Comma c) <- UnigramSecondLeftPhraseFeature, UnigramSecondRightPhraseFeature, UnigramLeftPhraseFeature, UnigramRightPhraseFeature
discrete% BigramParseFeatures(Comma c) <- BigramLeftPhraseFeature, BigramRightPhraseFeature, BigramLeftRightPhraseFeature

discrete% ChunkFeatures(Comma c) <- UnigramLeftChunkFeature && UnigramSecondLeftChunkFeature, UnigramRightChunkFeature && UnigramSecondRightChunkFeature, UnigramLeftChunkFeature && UnigramRightChunkFeature
discrete% StrippedParseFeatures(Comma c) <- StrippedSiblingParseFeatures, BigramLeftStrippedPhraseFeature, BigramRightStrippedPhraseFeature, BigramLeftRightStrippedPhraseFeature
discrete% ParseFeatures(Comma c) <- SiblingParseFeatures, BigramParseFeatures
discrete% POSFeatures(Comma c) <- UnigramLeftPOSFeature && UnigramRightPOSFeature, UnigramLeftPOSFeature && UnigramSecondLeftPOSFeature, UnigramRightPOSFeature && UnigramSecondRightPOSFeature

discrete% DependencyFeatures(Comma c) <- RightToLeftDependencies , LeftToRightDependencies

discrete CommaLabel(Comma c) <- { 
	return c.getVivekNaveenRole();
}

/** A learned text classifier; its definition comes from data. */
discrete LocalCommaClassifier(Comma c) <-
learn CommaLabel

	//using POSFeatures, DependencyFeatures, StrippedParseFeatures, StrippedParseTreeFeature, BayraktarLabelFeature, BayraktarPatternFeature//Use for GOlD-AUTO evaluation
	
	using  ParseFeatures, ParseTreeFeature, BayraktarLabelFeature, BayraktarPatternFeature
	
	with SparseNetworkLearner {
	    SparseAveragedPerceptron.Parameters p = new SparseAveragedPerceptron.Parameters();
	    //p.learningRate = {{.010 -> 0.030 : 0.002}};
	    //p.thickness = {{2.0 -> 4.6 : 0.2}};
	    //p.learningRate = 0.024;//AUTO-AUTO
	    //p.thickness = 3.6;//AUTO-AUTO
	    //p.learningRate = 0.014;//GOLD-GOLD
	    //p.thickness = 3.4;//GOLD-GOLD
	    p.learningRate = 0.024;//GOLD-AUTO
	    p.thickness = 3.9;//GOLD-AUTO
	    baseLTU = new SparseAveragedPerceptron(p);
	}
	from
		new CommaReader("data/comma_resolution_data.txt", "data/CommaFullView.ser", CommaReader.Ordering.ORDERED_SENTENCE)
		//from new CommaReader("data/train_commas.txt", "data/train_commas.ser", CommaReader.Ordering.ORDERED_SENTENCE)
		//{{ 90, 100, 110, 120, 130, 140, 150, 160, 170, 180, 190}} rounds
		//90 rounds//AUTO-AUTO
		//160 rounds//GOLD-GOLD
		120 rounds//GOLD-AUTO
		
	cval 5 "random"

	testingMetric new PrintMetrics(5)
	progressOutput 0
end



constraint substitutePairFirstComma (Sentence s)
{
	forall (Comma c in s.getFirstSiblingCommasWhichAreNotLast())
		((LocalCommaClassifier(c) :: "Substitute") => (LocalCommaClassifier(s.getNextSiblingComma(c)) :: "Substitute"));
}

constraint substitutePairMiddleCommas (Sentence s)
{
	forall (Comma c in s.getMiddleSiblingCommas())
		((LocalCommaClassifier(c) :: "Substitute") => 
												((LocalCommaClassifier(s.getNextSiblingComma(c)) :: "Substitute")
												\/(LocalCommaClassifier(s.getPreviousSiblingComma(c)) :: "Substitute")));
}

//substitute commas must occur in pairs or must be the last comma in the sentence.
constraint substitutePair (Sentence s)
{
	(@substitutePairFirstComma(s) /\ @substitutePairMiddleCommas(s));
}

constraint locativePairFirstComma (Sentence s)
{
	forall (Comma c in s.getFirstSiblingCommasWhichAreNotLast())
		((LocalCommaClassifier(c) :: "Locative") => (LocalCommaClassifier(s.getNextSiblingComma(c)) :: "Locative"));
}

constraint locativePairMiddleCommas (Sentence s)
{
	forall (Comma c in s.getMiddleSiblingCommas())
		((LocalCommaClassifier(c) :: "Locative") => 
												((LocalCommaClassifier(s.getNextSiblingComma(c)) :: "Locative")
												\/(LocalCommaClassifier(s.getPreviousSiblingComma(c)) :: "Locative")));
}

//one exception is "champaign, IL, USA". Here the 2 commas are for two different located in's as compared to "Champaign, IL, is a nice city" where the 2 commas are for one 'located in'
constraint locativePair (Sentence s)
{
	@locativePairFirstComma(s) /\ @locativePairMiddleCommas(s);
}

//if a comma is followed by an 'and', it is a list comma
//can't simply check for next POS tag to be a CC. conflicts with wsj 0015mrg 8 substitute
constraint oxfordComma (Sentence s)
{
	forall (Comma c in s.getCommas())
		((UnigramRightFeature(c) :: "and") => 
											(LocalCommaClassifier(c) :: "List"));
}

//if the commas on either side of a comma are list commas it is a list comma?
constraint listCommas (Sentence s)
{
	forall (Comma c in s.getMiddleSiblingCommas())
		(((LocalCommaClassifier(s.getPreviousSiblingComma(c)) :: "List") 
		 /\(LocalCommaClassifier(s.getNextSiblingComma(c)) :: "List")) =>
																	(LocalCommaClassifier(c) :: "List"));
}



inference OxfordCommaConstrainedInference head Sentence s {
	Comma c {return c.getSentence();}
	subjectto {@oxfordComma(s);}
	with new ILPInference(new GurobiHook())
}
discrete OxfordCommaConstrainedCommaClassifier (Comma c) <- 
	OxfordCommaConstrainedInference(LocalCommaClassifier)

inference SubstitutePairConstrainedInference head Sentence s {
	Comma c {return c.getSentence();}
	subjectto {@substitutePair(s);}
	with new ILPInference(new GurobiHook())
}
discrete SubstitutePairConstrainedCommaClassifier (Comma c) <- 
	SubstitutePairConstrainedInference(LocalCommaClassifier)	

inference LocativePairConstrainedInference head Sentence s {
	Comma c {return c.getSentence();}
	subjectto {@locativePair(s);}
	with new ILPInference(new GurobiHook())
}
discrete LocativePairConstrainedCommaClassifier (Comma c) <- 
	LocativePairConstrainedInference(LocalCommaClassifier)
	
inference ListCommasConstrainedInference head Sentence s {
	Comma c {return c.getSentence();}
	subjectto {@listCommas(s);}
	with new ILPInference(new GurobiHook())
}
discrete ListCommasConstrainedCommaClassifier (Comma c) <- 
	ListCommasConstrainedInference(LocalCommaClassifier)
	

