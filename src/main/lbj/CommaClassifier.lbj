package edu.illinois.cs.cogcomp.comma;

discrete% UnigramLeftFeature(Comma c) <- {
    sense c.getWordToLeft(1);
}

discrete% UnigramSecondLeftFeature(Comma c) <- {
	sense c.getWordToLeft(2);
}

discrete% BigramLeftFeature(Comma c) <- {
    sense c.getWordToLeft(2) + "-" + c.getWordToLeft(1);
}

discrete% UnigramRightFeature(Comma c) <- {
    sense c.getWordToRight(1);
}

discrete% UnigramSecondRightFeature(Comma c) <- {
	sense c.getWordToRight(2);
}

discrete% BigramRightFeature(Comma c) <- {
    sense c.getWordToRight(2) + "-" + c.getWordToRight(1);
}

discrete% OneWordWindowFeature(Comma c) <- {
    sense c.getWordToLeft(1) + "-" + c.getWordToRight(1);
}

discrete% TwoWordWindowFeature(Comma c) <- {
    String left = c.getWordToLeft(2) + "-" + c.getWordToLeft(1);
    String right = c.getWordToRight(2) + "-" + c.getWordToRight(1);
    sense left + "-" + right;
}

discrete CommaLabel(Comma c) <- { return c.getRole(); }

/** A learned text classifier; its definition comes from data. */
discrete CommaClassifier(Comma c) <-
learn CommaLabel
  using UnigramLeftFeature, UnigramRightFeature, UnigramSecondLeftFeature, UnigramSecondRightFeature 
  from new CommaReader("data/comma_resolution_data.txt")
  100 rounds
//  with new NaiveBayes()
  cval 5 "random"

  with SparseNetworkLearner {
    SparseAveragedPerceptron.Parameters p = new SparseAveragedPerceptron.Parameters();
    p.learningRate = .1;
    p.thickness = 3;
    baseLTU = new SparseAveragedPerceptron(p);
  }

  testingMetric new PrintMetrics(5)
//  testFrom new CommaReader("data/comma_resolution_data.txt", "test")


  progressOutput 0
end
