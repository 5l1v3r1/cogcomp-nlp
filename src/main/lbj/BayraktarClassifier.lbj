package edu.illinois.cs.cogcomp.comma.lbj.bayraktar;
import edu.illinois.cs.cogcomp.comma.lbj.PrintMetrics;
import edu.illinois.cs.cogcomp.comma.Comma;
import edu.illinois.cs.cogcomp.comma.Sentence;
import edu.illinois.cs.cogcomp.comma.CommaReader;
import edu.illinois.cs.cogcomp.comma.bayraktar.BayraktarPatternLabeler;
import edu.illinois.cs.cogcomp.edison.data.corpora.PennTreebankReader;
import edu.illinois.cs.cogcomp.comma.CommaParser;
import edu.illinois.cs.cogcomp.edison.sentences.Constituent;
import edu.illinois.cs.cogcomp.edison.sentences.ViewNames;
import edu.illinois.cs.cogcomp.edison.sentences.Relation;
import edu.illinois.cs.cogcomp.edison.sentences.PredicateArgumentView;
import java.util.List;
import java.util.ArrayList;




discrete UnigramLeftPOSFeature(Comma c) <- {
    return c.getPOSToLeft(1);
}

discrete UnigramSecondLeftPOSFeature(Comma c) <- {
    return c.getPOSToLeft(2);
}

discrete UnigramRightPOSFeature(Comma c) <- {
    return c.getPOSToRight(1);
}

discrete UnigramSecondRightPOSFeature(Comma c) <- {
    return c.getPOSToRight(2);
}


discrete UnigramLeftPhraseFeature(Comma c) <- {
    return c.getNotation(c.getPhraseToLeftOfComma(1));
}

discrete UnigramSecondLeftPhraseFeature(Comma c) <- {
  return c.getNotation(c.getPhraseToLeftOfComma(2));
}

discrete UnigramRightPhraseFeature(Comma c) <- {
    return c.getNotation(c.getPhraseToRightOfComma(1));
}

discrete UnigramSecondRightPhraseFeature(Comma c) <- {
  return c.getNotation(c.getPhraseToRightOfComma(2));
}

discrete CommaParentPhraseFeature(Comma c) <- {
    return c.getNotation(c.getPhraseToLeftOfParent(0));
}

discrete UnigramParentLeftPhraseFeature(Comma c) <- {
    return c.getNotation(c.getPhraseToLeftOfParent(1));
}

discrete UnigramParentSecondLeftPhraseFeature(Comma c) <- {
  return c.getNotation(c.getPhraseToLeftOfParent(2));
}

discrete UnigramParentRightPhraseFeature(Comma c) <- {
    return c.getNotation(c.getPhraseToRightOfParent(1));
}

discrete UnigramParentSecondRightPhraseFeature(Comma c) <- {
  return c.getNotation(c.getPhraseToRightOfParent(2));
}

discrete ParseTreeFeature(Comma c) <- {
    String tree = "";
    int distance = 0;
    String phrase;
    do{
      phrase = c.getNotation(c.getPhraseToLeftOfParent(distance));
      tree = phrase + tree;
      distance++;
    }while(!phrase.equals("NULL"));

    String commaLevelPhrases = "";
    distance = 0;
	do{
      phrase = c.getNotation(c.getPhraseToLeftOfComma(distance));
      commaLevelPhrases =  phrase + commaLevelPhrases;
      distance++;
    }while(!phrase.equals("NULL"));
    
	distance = 1;
    do{
      phrase = c.getNotation(c.getPhraseToRightOfComma(distance));
      commaLevelPhrases = commaLevelPhrases + phrase;
      distance++;
    }while(!phrase.equals("NULL"));
	tree += "(" + commaLevelPhrases + ")";

    distance = 1;
    do{
      phrase = c.getNotation(c.getPhraseToRightOfParent(distance));
      tree = tree + phrase;
      distance++;
    }while(!phrase.equals("NULL"));
    
    return tree;
    //return commaLevelPhrases;
}



discrete CommaSiblingsFeature(Comma c) <- {
    String commaLevelPhrases = "";
    String phrase;
    int distance = 0;
	do{
      phrase = c.getNotation(c.getPhraseToLeftOfComma(distance));
      commaLevelPhrases =  phrase + commaLevelPhrases;
      distance++;
    }while(!phrase.equals("NULL"));
    
	distance = 1;
    do{
      phrase = c.getNotation(c.getPhraseToRightOfComma(distance));
      commaLevelPhrases = commaLevelPhrases + phrase;
      distance++;
    }while(!phrase.equals("NULL"));

    return commaLevelPhrases;
}

discrete BayraktarLabelFeature(Comma c) <- {
	return c.getBayraktarLabel();
}


discrete BigramLeftPhraseFeature(Comma c) <- UnigramSecondLeftPhraseFeature && UnigramLeftPhraseFeature
discrete BigramRightPhraseFeature(Comma c) <- UnigramSecondRightPhraseFeature && UnigramRightPhraseFeature
discrete BigramLeftRightPhraseFeature(Comma c) <- UnigramLeftPhraseFeature && UnigramRightPhraseFeature
discrete BigramParentLeftPhraseFeature(Comma c) <- UnigramParentSecondLeftPhraseFeature && UnigramParentLeftPhraseFeature
discrete BigramParentRightPhraseFeature(Comma c) <- UnigramParentSecondRightPhraseFeature && UnigramParentRightPhraseFeature 

discrete% SiblingParseFeatures(Comma c) <- UnigramSecondLeftPhraseFeature, UnigramSecondRightPhraseFeature, UnigramLeftPhraseFeature, UnigramRightPhraseFeature
discrete% BigramParseFeatures(Comma c) <- BigramLeftPhraseFeature, BigramRightPhraseFeature, BigramLeftRightPhraseFeature
discrete% ParseFeatures(Comma c) <- SiblingParseFeatures, BigramParseFeatures

discrete% ParentParseFeatures(Comma c) <- CommaParentPhraseFeature, UnigramParentLeftPhraseFeature, UnigramParentSecondLeftPhraseFeature, UnigramParentRightPhraseFeature, UnigramParentSecondRightPhraseFeature, BigramParentLeftPhraseFeature, BigramParentRightPhraseFeature

discrete% POSFeatures(Comma c) <- UnigramLeftPOSFeature && UnigramRightPOSFeature, UnigramLeftPOSFeature && UnigramSecondLeftPOSFeature, UnigramRightPOSFeature && UnigramSecondRightPOSFeature


discrete BayraktarLabel(Comma c) <- { 
	String bayraktarLabel = c.getBayraktarLabel();
	if(bayraktarLabel==null)
		return "Other";
	else 
		return bayraktarLabel;
}

discrete VivekLabel(Comma c) <- { 
	return c.getVivekBayraktarRole();
}

discrete BayraktarClassifier(Comma c) <-
learn BayraktarLabel

	using POSFeatures, ParseFeatures, ParseTreeFeature//, BayraktarLabelFeature

  from new CommaParser()
  //125 rounds //AUTO
  125 rounds //GOLD
  cval 20 "random"

  with SparseNetworkLearner {
    SparseAveragedPerceptron.Parameters p = new SparseAveragedPerceptron.Parameters();
    p.learningRate = .01;
    p.thickness = 3;
    baseLTU = new SparseAveragedPerceptron(p);
  }


  testingMetric new PrintMetrics(20)
  
  progressOutput 0
end