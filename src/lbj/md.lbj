package org.cogcomp.md;
import java.util.*;
import edu.illinois.cs.cogcomp.core.datastructures.textannotation.*;
import edu.illinois.cs.cogcomp.core.datastructures.Pair;

discrete bio_label (Constituent c) <- {
    return c.getAttribute("BIO");
}

discrete% gazetteers_features (Constituent c) <- {
    List features = BIOFeatureExtractor.getGazetteerFeatures(c);
    for (int i = 0; i < features.size(); i++){
        sense features.get(i);
    }
}

real% wordEmbedding_features (Constituent c) <- {
    List features = BIOFeatureExtractor.getWordEmbeddingsFeatures(c);
}

discrete% isSentenceStart (Constituent c) <- {
    sense "start" : BIOFeatureExtractor.isSentenceStart(c);
}

discrete% wordForm_features (Constituent c) <- {
    List features = BIOFeatureExtractor.getWordFormFeatures(c);
    for (int i = 0; i < features.size(); i++){
        Pair p = (Pair)features.get(i);
        int idx = (Integer)p.getFirst();
        String val = (String)p.getSecond();
        sense idx : val;
    }
}

discrete bio_classifier (Constituent c) <-
learn bio_label
    using isSentenceStart, wordForm_features
    from new BIOReader("data/partition_with_dev/train/0", "ACE05")
    5 rounds
    with SupportVectorMachine {

    }
    testFrom new BIOReader("data/partition_with_dev/eval/0", "ACE05")

    progressOutput 10000
end