package org.cogcomp.md;
import java.util.*;
import edu.illinois.cs.cogcomp.core.datastructures.textannotation.*;
import edu.illinois.cs.cogcomp.core.datastructures.Pair;

discrete bio_label (Constituent c) <- {
    return c.getAttribute("BIO");
}

discrete% gazetteers_features (Constituent c) <- {
    List features = BIOFeatureExtractor.getGazetteerFeatures(c);
    for (int i = 0; i < features.size(); i++){
        Pair p = (Pair)features.get(i);
        int idx = (Integer)p.getFirst();
        String val = (String)p.getSecond();
        sense idx : val;
    }
}

real% wordEmbedding_features (Constituent c) <- {
    List features = BIOFeatureExtractor.getWordEmbeddingsFeatures(c);
}

discrete% isSentenceStart (Constituent c) <- {
    sense "start" : BIOFeatureExtractor.isSentenceStart(c);
}

discrete% wordForm_features (Constituent c) <- {
    List features = BIOFeatureExtractor.getWordFormFeatures(c);
    for (int i = 0; i < features.size(); i++){
        Pair p = (Pair)features.get(i);
        int idx = (Integer)p.getFirst();
        String val = (String)p.getSecond();
        sense idx : val;
    }
}

discrete{false, true}% Capitalization (Constituent c) <- {
    View bioView = c.getTextAnnotation().getView("BIO");
    for (int i = -1; i < 3; i++){
        int curId = c.getStartSpan() + i;
        if (curId < 0 || curId >= bioView.getEndSpan()){
            continue;
        }
        Constituent cCur = bioView.getConstituentsCoveringToken(c.getStartSpan() + i).get(0);
        if (cCur != null){
            String cCurForm = cCur.toString();
            boolean cap = (!cCurForm.equals(cCurForm.toLowerCase()));
            sense i : cap;
        }
    }
}

discrete% Affixes (Constituent c) <- {
    String form = c.toString();
    for (int i = 3; i <= 4; i++){
        if (form.length() > i){
            sense "p|" : form.substring(0, i);
        }
    }
    for (int i = 1; i <= 4; i++){
        if (form.length() > i){
            sense "s|" : form.substring(form.length() - i);
        }
    }
}

discrete% POS_Features (Constituent c) <- {
    List features = BIOFeatureExtractor.getPOSFeatures(c);
    for (int i = 0; i < features.size(); i++){
        Pair p = (Pair)features.get(i);
        int idx = (Integer)p.getFirst();
        String val = (String)p.getSecond();
        sense idx : val;
    }
}

discrete% AffixesZH (Constituent c) <- {
    String form = c.toString();
    for (int i = 1; i <= 2; i++){
        if (form.length() > i){
            sense "ZH-p|" : form.substring(0, i);
        }
    }
    for (int i = 1; i <= 2; i++){
        if (form.length() > i){
            sense "ZH-s|" : form.substring(form.length() - i);
        }
    }
}

discrete{false, true}% WordTypeInformation (Constituent c) <- {
    List features = BIOFeatureExtractor.getWordTypeInformation(c);
    for (int i = 0; i < features.size(); i++){
        Pair p = (Pair)features.get(i);
        String idx = (String)p.getFirst();
        boolean val = (Boolean)p.getSecond();
        sense idx : val;
    }
}

discrete% BrownClusterPaths (Constituent c) <- {
        List features = BIOFeatureExtractor.getBrownClusterPaths(c);
        for (int i = 0; i < features.size(); i++){
            Pair p = (Pair)features.get(i);
            int idx = (Integer)p.getFirst();
            String val = (String)p.getSecond();
            sense idx : val;
        }
}

discrete% preBIOLevel1 (Constituent c) <- {
    if (c.getStartSpan() - 1 > 0){
        Constituent cPrev = c.getTextAnnotation().getView("BIO").getConstituentsCoveringToken(c.getStartSpan() - 1).get(0);
        if (cPrev != null){
            if (c.getAttribute("isTraining").equals("true")){
                sense "-1" : cPrev.getAttribute("BIO");
            }
            else if (!c.getAttribute("preBIOLevel1").equals("")){
                sense "-1" : c.getAttribute("preBIOLevel1");
            }
        }
    }
}

discrete% preBIOLevel2 (Constituent c) <- {
    if (c.getStartSpan() - 2 > 0){
        Constituent cPrev = c.getTextAnnotation().getView("BIO").getConstituentsCoveringToken(c.getStartSpan() - 2).get(0);
        if (cPrev != null){
            if (c.getAttribute("isTraining").equals("true")){
                sense "-2" : cPrev.getAttribute("BIO");
            }
            else if (!c.getAttribute("preBIOLevel1").equals("")){
                sense "-2" : c.getAttribute("preBIOLevel2");
            }
        }
    }
}

discrete bio_classifier (Constituent c) <-
learn bio_label
    using Capitalization, gazetteers_features, isSentenceStart, wordForm_features, Affixes, AffixesZH, POS_Features, WordTypeInformation, BrownClusterPaths, preBIOLevel1, preBIOLevel2
    from new BIOReader("data/partition_with_dev/train/0", "ACE05")
    5 rounds
    with SupportVectorMachine {

    }
    testFrom new BIOReader("data/partition_with_dev/eval/0", "ACE05")

    progressOutput 10000
end